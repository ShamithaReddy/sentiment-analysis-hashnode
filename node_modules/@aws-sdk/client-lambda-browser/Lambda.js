"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var LambdaClient_1 = require("./LambdaClient");
var AddLayerVersionPermissionCommand_1 = require("./commands/AddLayerVersionPermissionCommand");
var AddPermissionCommand_1 = require("./commands/AddPermissionCommand");
var CreateAliasCommand_1 = require("./commands/CreateAliasCommand");
var CreateEventSourceMappingCommand_1 = require("./commands/CreateEventSourceMappingCommand");
var CreateFunctionCommand_1 = require("./commands/CreateFunctionCommand");
var DeleteAliasCommand_1 = require("./commands/DeleteAliasCommand");
var DeleteEventSourceMappingCommand_1 = require("./commands/DeleteEventSourceMappingCommand");
var DeleteFunctionCommand_1 = require("./commands/DeleteFunctionCommand");
var DeleteFunctionConcurrencyCommand_1 = require("./commands/DeleteFunctionConcurrencyCommand");
var DeleteLayerVersionCommand_1 = require("./commands/DeleteLayerVersionCommand");
var GetAccountSettingsCommand_1 = require("./commands/GetAccountSettingsCommand");
var GetAliasCommand_1 = require("./commands/GetAliasCommand");
var GetEventSourceMappingCommand_1 = require("./commands/GetEventSourceMappingCommand");
var GetFunctionCommand_1 = require("./commands/GetFunctionCommand");
var GetFunctionConfigurationCommand_1 = require("./commands/GetFunctionConfigurationCommand");
var GetLayerVersionByArnCommand_1 = require("./commands/GetLayerVersionByArnCommand");
var GetLayerVersionCommand_1 = require("./commands/GetLayerVersionCommand");
var GetLayerVersionPolicyCommand_1 = require("./commands/GetLayerVersionPolicyCommand");
var GetPolicyCommand_1 = require("./commands/GetPolicyCommand");
var InvokeAsyncCommand_1 = require("./commands/InvokeAsyncCommand");
var InvokeCommand_1 = require("./commands/InvokeCommand");
var ListAliasesCommand_1 = require("./commands/ListAliasesCommand");
var ListEventSourceMappingsCommand_1 = require("./commands/ListEventSourceMappingsCommand");
var ListFunctionsCommand_1 = require("./commands/ListFunctionsCommand");
var ListLayerVersionsCommand_1 = require("./commands/ListLayerVersionsCommand");
var ListLayersCommand_1 = require("./commands/ListLayersCommand");
var ListTagsCommand_1 = require("./commands/ListTagsCommand");
var ListVersionsByFunctionCommand_1 = require("./commands/ListVersionsByFunctionCommand");
var PublishLayerVersionCommand_1 = require("./commands/PublishLayerVersionCommand");
var PublishVersionCommand_1 = require("./commands/PublishVersionCommand");
var PutFunctionConcurrencyCommand_1 = require("./commands/PutFunctionConcurrencyCommand");
var RemoveLayerVersionPermissionCommand_1 = require("./commands/RemoveLayerVersionPermissionCommand");
var RemovePermissionCommand_1 = require("./commands/RemovePermissionCommand");
var TagResourceCommand_1 = require("./commands/TagResourceCommand");
var UntagResourceCommand_1 = require("./commands/UntagResourceCommand");
var UpdateAliasCommand_1 = require("./commands/UpdateAliasCommand");
var UpdateEventSourceMappingCommand_1 = require("./commands/UpdateEventSourceMappingCommand");
var UpdateFunctionCodeCommand_1 = require("./commands/UpdateFunctionCodeCommand");
var UpdateFunctionConfigurationCommand_1 = require("./commands/UpdateFunctionConfigurationCommand");
var Lambda = /** @class */ (function (_super) {
    tslib_1.__extends(Lambda, _super);
    function Lambda() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Lambda.prototype.addLayerVersionPermission = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new AddLayerVersionPermissionCommand_1.AddLayerVersionPermissionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.addPermission = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new AddPermissionCommand_1.AddPermissionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.createAlias = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateAliasCommand_1.CreateAliasCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.createEventSourceMapping = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateEventSourceMappingCommand_1.CreateEventSourceMappingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.createFunction = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateFunctionCommand_1.CreateFunctionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.deleteAlias = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteAliasCommand_1.DeleteAliasCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.deleteEventSourceMapping = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteEventSourceMappingCommand_1.DeleteEventSourceMappingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.deleteFunction = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteFunctionCommand_1.DeleteFunctionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.deleteFunctionConcurrency = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteFunctionConcurrencyCommand_1.DeleteFunctionConcurrencyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.deleteLayerVersion = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteLayerVersionCommand_1.DeleteLayerVersionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getAccountSettings = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetAccountSettingsCommand_1.GetAccountSettingsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getAlias = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetAliasCommand_1.GetAliasCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getEventSourceMapping = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetEventSourceMappingCommand_1.GetEventSourceMappingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getFunction = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetFunctionCommand_1.GetFunctionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getFunctionConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getLayerVersion = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetLayerVersionCommand_1.GetLayerVersionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getLayerVersionByArn = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetLayerVersionByArnCommand_1.GetLayerVersionByArnCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getLayerVersionPolicy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetLayerVersionPolicyCommand_1.GetLayerVersionPolicyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.getPolicy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetPolicyCommand_1.GetPolicyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.invoke = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new InvokeCommand_1.InvokeCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.invokeAsync = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new InvokeAsyncCommand_1.InvokeAsyncCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listAliases = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListAliasesCommand_1.ListAliasesCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listEventSourceMappings = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListEventSourceMappingsCommand_1.ListEventSourceMappingsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listFunctions = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListFunctionsCommand_1.ListFunctionsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listLayerVersions = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListLayerVersionsCommand_1.ListLayerVersionsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listLayers = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListLayersCommand_1.ListLayersCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listTags = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListTagsCommand_1.ListTagsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.listVersionsByFunction = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListVersionsByFunctionCommand_1.ListVersionsByFunctionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.publishLayerVersion = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PublishLayerVersionCommand_1.PublishLayerVersionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.publishVersion = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PublishVersionCommand_1.PublishVersionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.putFunctionConcurrency = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutFunctionConcurrencyCommand_1.PutFunctionConcurrencyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.removeLayerVersionPermission = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new RemoveLayerVersionPermissionCommand_1.RemoveLayerVersionPermissionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.removePermission = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new RemovePermissionCommand_1.RemovePermissionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.tagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.untagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.updateAlias = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateAliasCommand_1.UpdateAliasCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.updateEventSourceMapping = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateEventSourceMappingCommand_1.UpdateEventSourceMappingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.updateFunctionCode = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateFunctionCodeCommand_1.UpdateFunctionCodeCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Lambda.prototype.updateFunctionConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateFunctionConfigurationCommand_1.UpdateFunctionConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    return Lambda;
}(LambdaClient_1.LambdaClient));
exports.Lambda = Lambda;
//# sourceMappingURL=Lambda.js.map