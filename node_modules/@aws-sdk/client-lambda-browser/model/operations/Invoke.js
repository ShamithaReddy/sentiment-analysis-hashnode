"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InvokeInput_1 = require("../shapes/InvokeInput");
var InvokeOutput_1 = require("../shapes/InvokeOutput");
var ServiceException_1 = require("../shapes/ServiceException");
var ResourceNotFoundException_1 = require("../shapes/ResourceNotFoundException");
var InvalidRequestContentException_1 = require("../shapes/InvalidRequestContentException");
var RequestTooLargeException_1 = require("../shapes/RequestTooLargeException");
var UnsupportedMediaTypeException_1 = require("../shapes/UnsupportedMediaTypeException");
var TooManyRequestsException_1 = require("../shapes/TooManyRequestsException");
var InvalidParameterValueException_1 = require("../shapes/InvalidParameterValueException");
var EC2UnexpectedException_1 = require("../shapes/EC2UnexpectedException");
var SubnetIPAddressLimitReachedException_1 = require("../shapes/SubnetIPAddressLimitReachedException");
var ENILimitReachedException_1 = require("../shapes/ENILimitReachedException");
var EC2ThrottledException_1 = require("../shapes/EC2ThrottledException");
var EC2AccessDeniedException_1 = require("../shapes/EC2AccessDeniedException");
var InvalidSubnetIDException_1 = require("../shapes/InvalidSubnetIDException");
var InvalidSecurityGroupIDException_1 = require("../shapes/InvalidSecurityGroupIDException");
var InvalidZipFileException_1 = require("../shapes/InvalidZipFileException");
var KMSDisabledException_1 = require("../shapes/KMSDisabledException");
var KMSInvalidStateException_1 = require("../shapes/KMSInvalidStateException");
var KMSAccessDeniedException_1 = require("../shapes/KMSAccessDeniedException");
var KMSNotFoundException_1 = require("../shapes/KMSNotFoundException");
var InvalidRuntimeException_1 = require("../shapes/InvalidRuntimeException");
var ServiceMetadata_1 = require("../ServiceMetadata");
exports.Invoke = {
    metadata: ServiceMetadata_1.ServiceMetadata,
    name: "Invoke",
    http: {
        method: "POST",
        requestUri: "/2015-03-31/functions/{FunctionName}/invocations"
    },
    input: {
        shape: InvokeInput_1.InvokeInput
    },
    output: {
        shape: InvokeOutput_1.InvokeOutput
    },
    errors: [
        {
            shape: ServiceException_1.ServiceException
        },
        {
            shape: ResourceNotFoundException_1.ResourceNotFoundException
        },
        {
            shape: InvalidRequestContentException_1.InvalidRequestContentException
        },
        {
            shape: RequestTooLargeException_1.RequestTooLargeException
        },
        {
            shape: UnsupportedMediaTypeException_1.UnsupportedMediaTypeException
        },
        {
            shape: TooManyRequestsException_1.TooManyRequestsException
        },
        {
            shape: InvalidParameterValueException_1.InvalidParameterValueException
        },
        {
            shape: EC2UnexpectedException_1.EC2UnexpectedException
        },
        {
            shape: SubnetIPAddressLimitReachedException_1.SubnetIPAddressLimitReachedException
        },
        {
            shape: ENILimitReachedException_1.ENILimitReachedException
        },
        {
            shape: EC2ThrottledException_1.EC2ThrottledException
        },
        {
            shape: EC2AccessDeniedException_1.EC2AccessDeniedException
        },
        {
            shape: InvalidSubnetIDException_1.InvalidSubnetIDException
        },
        {
            shape: InvalidSecurityGroupIDException_1.InvalidSecurityGroupIDException
        },
        {
            shape: InvalidZipFileException_1.InvalidZipFileException
        },
        {
            shape: KMSDisabledException_1.KMSDisabledException
        },
        {
            shape: KMSInvalidStateException_1.KMSInvalidStateException
        },
        {
            shape: KMSAccessDeniedException_1.KMSAccessDeniedException
        },
        {
            shape: KMSNotFoundException_1.KMSNotFoundException
        },
        {
            shape: InvalidRuntimeException_1.InvalidRuntimeException
        }
    ]
};
//# sourceMappingURL=Invoke.js.map