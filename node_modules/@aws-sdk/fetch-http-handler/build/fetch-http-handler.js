"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var request_timeout_1 = require("./request-timeout");
var querystring_builder_1 = require("@aws-sdk/querystring-builder");
var FetchHttpHandler = /** @class */ (function () {
    function FetchHttpHandler(httpOptions) {
        if (httpOptions === void 0) { httpOptions = {}; }
        this.httpOptions = httpOptions;
    }
    FetchHttpHandler.prototype.destroy = function () {
        // Do nothing. TLS and HTTP/2 connection pooling is handled by the
        // browser.
    };
    FetchHttpHandler.prototype.handle = function (request, options) {
        var abortSignal = options && options.abortSignal;
        var requestTimeoutInMs = this.httpOptions.requestTimeout;
        // if the request was already aborted, prevent doing extra work
        if (abortSignal && abortSignal.aborted) {
            var abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        var path = request.path;
        if (request.query) {
            var queryString = querystring_builder_1.buildQueryString(request.query);
            if (queryString) {
                path += "?" + queryString;
            }
        }
        var port = request.port;
        var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
        var requestOptions = {
            body: request.body,
            headers: new Headers(request.headers),
            method: request.method,
            mode: "cors"
        };
        // some browsers support abort signal
        if (typeof AbortController !== "undefined") {
            requestOptions["signal"] = abortSignal;
        }
        var fetchRequest = new Request(url, requestOptions);
        var raceOfPromises = [
            fetch(fetchRequest).then(function (response) {
                var e_1, _a;
                var fetchHeaders = response.headers;
                var transformedHeaders = {};
                try {
                    for (var _b = tslib_1.__values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var pair = _c.value;
                        transformedHeaders[pair[0]] = pair[1];
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return response.blob().then(function (body) { return ({
                    headers: transformedHeaders,
                    statusCode: response.status,
                    body: body
                }); });
            }),
            request_timeout_1.requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
            raceOfPromises.push(new Promise(function (resolve, reject) {
                abortSignal.onabort = function () {
                    var abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
            }));
        }
        return Promise.race(raceOfPromises);
    };
    return FetchHttpHandler;
}());
exports.FetchHttpHandler = FetchHttpHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2gtaHR0cC1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZldGNoLWh0dHAtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQSxxREFBbUQ7QUFDbkQsb0VBQWdFO0FBSWhFO0lBQ0UsMEJBQTZCLFdBQW9DO1FBQXBDLDRCQUFBLEVBQUEsZ0JBQW9DO1FBQXBDLGdCQUFXLEdBQVgsV0FBVyxDQUF5QjtJQUFHLENBQUM7SUFFckUsa0NBQU8sR0FBUDtRQUNFLGtFQUFrRTtRQUNsRSxXQUFXO0lBQ2IsQ0FBQztJQUVELGlDQUFNLEdBQU4sVUFDRSxPQUEwQixFQUMxQixPQUEyQjtRQUUzQixJQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNuRCxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1FBRTNELCtEQUErRDtRQUMvRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQ3RDLElBQU0sVUFBVSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDaEQsVUFBVSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7WUFDL0IsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDakIsSUFBTSxXQUFXLEdBQUcsc0NBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BELElBQUksV0FBVyxFQUFFO2dCQUNmLElBQUksSUFBSSxNQUFJLFdBQWEsQ0FBQzthQUMzQjtTQUNGO1FBRUQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFNLEdBQUcsR0FBTSxPQUFPLENBQUMsUUFBUSxVQUFLLE9BQU8sQ0FBQyxRQUFRLElBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsTUFBSSxJQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFDckIsSUFBTSxDQUFDO1FBQ1YsSUFBTSxjQUFjLEdBQWdCO1lBQ2xDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtZQUNsQixPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNyQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07WUFDdEIsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDO1FBRUYscUNBQXFDO1FBQ3JDLElBQUksT0FBTyxlQUFlLEtBQUssV0FBVyxFQUFFO1lBQ3pDLGNBQXNCLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDO1NBQ2pEO1FBRUQsSUFBTSxZQUFZLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3RELElBQU0sY0FBYyxHQUFHO1lBQ3JCLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFROztnQkFDL0IsSUFBTSxZQUFZLEdBQVEsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDM0MsSUFBTSxrQkFBa0IsR0FBYyxFQUFFLENBQUM7O29CQUV6QyxLQUFpQixJQUFBLEtBQUEsaUJBQWlCLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQSxnQkFBQSw0QkFBRTt3QkFBckQsSUFBSSxJQUFJLFdBQUE7d0JBQ1gsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN2Qzs7Ozs7Ozs7O2dCQUVELE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBcUIsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDO29CQUN2RCxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU07b0JBQzNCLElBQUksTUFBQTtpQkFDTCxDQUFDLEVBSnNELENBSXRELENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQztZQUNGLGdDQUFjLENBQUMsa0JBQWtCLENBQUM7U0FDbkMsQ0FBQztRQUNGLElBQUksV0FBVyxFQUFFO1lBQ2YsY0FBYyxDQUFDLElBQUksQ0FDakIsSUFBSSxPQUFPLENBQVEsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQkFDakMsV0FBVyxDQUFDLE9BQU8sR0FBRztvQkFDcEIsSUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDaEQsVUFBVSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7b0JBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDckIsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO1FBQ0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUE3RUQsSUE2RUM7QUE3RVksNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQnJvd3Nlckh0dHBPcHRpb25zLFxuICBIYW5kbGVyLFxuICBIZWFkZXJCYWcsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwSGFuZGxlck9wdGlvbnMsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwUmVzcG9uc2UsXG4gIFF1ZXJ5UGFyYW1ldGVyQmFnXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyByZXF1ZXN0VGltZW91dCB9IGZyb20gXCIuL3JlcXVlc3QtdGltZW91dFwiO1xuaW1wb3J0IHsgYnVpbGRRdWVyeVN0cmluZyB9IGZyb20gXCJAYXdzLXNkay9xdWVyeXN0cmluZy1idWlsZGVyXCI7XG5cbmRlY2xhcmUgdmFyIEFib3J0Q29udHJvbGxlcjogYW55O1xuXG5leHBvcnQgY2xhc3MgRmV0Y2hIdHRwSGFuZGxlciBpbXBsZW1lbnRzIEh0dHBIYW5kbGVyPEJsb2IsIEJyb3dzZXJIdHRwT3B0aW9ucz4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGh0dHBPcHRpb25zOiBCcm93c2VySHR0cE9wdGlvbnMgPSB7fSkge31cblxuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIC8vIERvIG5vdGhpbmcuIFRMUyBhbmQgSFRUUC8yIGNvbm5lY3Rpb24gcG9vbGluZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgIC8vIGJyb3dzZXIuXG4gIH1cblxuICBoYW5kbGUoXG4gICAgcmVxdWVzdDogSHR0cFJlcXVlc3Q8QmxvYj4sXG4gICAgb3B0aW9uczogSHR0cEhhbmRsZXJPcHRpb25zXG4gICk6IFByb21pc2U8SHR0cFJlc3BvbnNlPEJsb2I+PiB7XG4gICAgY29uc3QgYWJvcnRTaWduYWwgPSBvcHRpb25zICYmIG9wdGlvbnMuYWJvcnRTaWduYWw7XG4gICAgY29uc3QgcmVxdWVzdFRpbWVvdXRJbk1zID0gdGhpcy5odHRwT3B0aW9ucy5yZXF1ZXN0VGltZW91dDtcblxuICAgIC8vIGlmIHRoZSByZXF1ZXN0IHdhcyBhbHJlYWR5IGFib3J0ZWQsIHByZXZlbnQgZG9pbmcgZXh0cmEgd29ya1xuICAgIGlmIChhYm9ydFNpZ25hbCAmJiBhYm9ydFNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBjb25zdCBhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiUmVxdWVzdCBhYm9ydGVkXCIpO1xuICAgICAgYWJvcnRFcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXF1ZXN0LnBhdGg7XG4gICAgaWYgKHJlcXVlc3QucXVlcnkpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gYnVpbGRRdWVyeVN0cmluZyhyZXF1ZXN0LnF1ZXJ5KTtcbiAgICAgIGlmIChxdWVyeVN0cmluZykge1xuICAgICAgICBwYXRoICs9IGA/JHtxdWVyeVN0cmluZ31gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBvcnQgPSByZXF1ZXN0LnBvcnQ7XG4gICAgY29uc3QgdXJsID0gYCR7cmVxdWVzdC5wcm90b2NvbH0vLyR7cmVxdWVzdC5ob3N0bmFtZX0ke1xuICAgICAgcG9ydCA/IGA6JHtwb3J0fWAgOiBcIlwiXG4gICAgfSR7cGF0aH1gO1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHtcbiAgICAgIGJvZHk6IHJlcXVlc3QuYm9keSxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHJlcXVlc3QuaGVhZGVycyksXG4gICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgbW9kZTogXCJjb3JzXCJcbiAgICB9O1xuXG4gICAgLy8gc29tZSBicm93c2VycyBzdXBwb3J0IGFib3J0IHNpZ25hbFxuICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAocmVxdWVzdE9wdGlvbnMgYXMgYW55KVtcInNpZ25hbFwiXSA9IGFib3J0U2lnbmFsO1xuICAgIH1cblxuICAgIGNvbnN0IGZldGNoUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwgcmVxdWVzdE9wdGlvbnMpO1xuICAgIGNvbnN0IHJhY2VPZlByb21pc2VzID0gW1xuICAgICAgZmV0Y2goZmV0Y2hSZXF1ZXN0KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgY29uc3QgZmV0Y2hIZWFkZXJzOiBhbnkgPSByZXNwb25zZS5oZWFkZXJzO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZEhlYWRlcnM6IEhlYWRlckJhZyA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IHBhaXIgb2YgPEFycmF5PHN0cmluZ1tdPj5mZXRjaEhlYWRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgdHJhbnNmb3JtZWRIZWFkZXJzW3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZS5ibG9iKCkudGhlbjxIdHRwUmVzcG9uc2U8QmxvYj4+KGJvZHkgPT4gKHtcbiAgICAgICAgICBoZWFkZXJzOiB0cmFuc2Zvcm1lZEhlYWRlcnMsXG4gICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgIGJvZHlcbiAgICAgICAgfSkpO1xuICAgICAgfSksXG4gICAgICByZXF1ZXN0VGltZW91dChyZXF1ZXN0VGltZW91dEluTXMpXG4gICAgXTtcbiAgICBpZiAoYWJvcnRTaWduYWwpIHtcbiAgICAgIHJhY2VPZlByb21pc2VzLnB1c2goXG4gICAgICAgIG5ldyBQcm9taXNlPG5ldmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgYWJvcnRTaWduYWwub25hYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIik7XG4gICAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgICAgIHJlamVjdChhYm9ydEVycm9yKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShyYWNlT2ZQcm9taXNlcyk7XG4gIH1cbn1cbiJdfQ==